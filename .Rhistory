}else if (analysis=="optimization") {
path <- paste0("C:/Users/PC/Quantconnect/",strategy,"/",analysis,"s/",run_date)
files <- list.dirs(path,full.names = F,recursive = F)
files <- files[!grepl("code",files)]
Stats <- tibble(Total_Trades=character(), Average_Win=character(), Average_Loss=character(),
Compounding_Annual_Return=character(),Drawdown=character(),Expectancy=character(),
Net_Profit=character(),Sharpe_Ratio=character(),Probabilistic_Sharpe_Ratio=character(),
Loss_Rate=character(),Win_Rate=character(),Profit_Loss_Ratio=character(),
Alpha=character(),Beta=character(),Annual_Standard_Deviation=character(),
Annual_Variance=character(),Information_Ratio=character(),Tracking_Error=character(),
Treynor_Ratio=character(),Total_Fees=character(),Estimated_Strategy_Capacity=character(),
Lowest_Capacity_Asset=character())
equity_series <-tibble()
dictionary <- list()
for (opt in files) {
path2 <- paste0(path,"/",opt)
files2 <- list.files(path2)
json_files2 <-  files2[stringr::str_split_fixed(files2,"\\.",n=2)[,2] =="json"]
filename_test2 <- json_files2[!(grepl("order",json_files2) | grepl("data",json_files2)) ]
optimresults <- jsonlite::fromJSON(paste0(path2,"/",filename_test2))
params <- optimresults$AlgorithmConfiguration$Parameters
Stats1 <- optimresults$Statistics %>% as_tibble()
Stats1 %>% colnames() %>% chartr(" ","_",x = .) %>% chartr("-","_",x = .) -> colnames(Stats1)
Stats1 <- cbind(Stats1,params)
if (which(files == opt)==1) {
Stats <- Stats1
}else{
Stats <- rbind(Stats,Stats1)
}
rm(Stats1)
equity_series1 <- optimresults$Charts$`Strategy Equity`$Series$Equity$Values %>% as_tibble() %>%
mutate(x=as.Date.POSIXct(x)) %>% rename(Date = x ,Equity = y)
paste0("alt_",which(files == opt)) -> colnames(equity_series1)[2]
if (which(files == opt)==1) {
equity_series <- equity_series1
}else{
equity_series <- left_join(equity_series,equity_series1,by="Date")
}
rm(equity_series1)
value <- list(params)
names(value) <- paste0("alt_",which(files == opt))
dictionary <- append(dictionary,value)
}
output <- list(Statistics = Stats,Equity = equity_series,Dict=dictionary)
return(output)
}else {errorCondition("Analysis have to be 'backtest' or 'Optimization'")}
}
meta_analysis(strategy = "Fat Apricot Donkey",run_date = "2023-02-17_16-15-56",analysis = "optimization")
#backtest
if (analysis == "backtest") {
path <- paste0("C:/Users/PC/Quantconnect/",strategy,"/",analysis,"s/",run_date)
files <- list.files(path)
filename_log <- files[grepl("-log",files)]
json_files <-  files[stringr::str_split_fixed(files,"\\.",n=2)[,2] =="json"]
filename_order <- json_files[grepl("order",json_files)]
filename_test <- json_files[!(grepl("order",json_files) | grepl("data",json_files)) ]
backestresults <- jsonlite::fromJSON(paste0(path,"/",filename_test))
Stats <- backestresults$Statistics %>% as_tibble()
Stats %>% colnames() %>% chartr(" ","_",x = .) -> colnames(Stats) #Stats complete
equity_series <- backestresults$Charts$`Strategy Equity`$Series$Equity$Values %>% as_tibble() %>%
mutate(x=as.Date.POSIXct(x)) %>% rename(Date = x ,Equity = y) #Equity complete
Log <- read.delim(paste0(path,"/",filename_log),sep = " ") %>% as_tibble()
c("time1","time2","catcher","symbol","Position","Value") -> colnames(Log)
Log %<>% unite("Date",c(time1,time2),sep=" ") %>% select(-'') %>%
filter(grepl("PositionsLogReport:",catcher)) %>% select(-catcher) %>%
mutate(Date=strptime(Date, format="%Y-%m-%d  %H:%M")) #Log dan position complete
backestresults$Orders %>% as_tibble_col() %>% mutate(ID= map_chr(value,~paste0("Order_",.$Id)),
CreatedTime= map_chr(value,~.$CreatedTime),
LastFilltime =map_chr(value,~.$LastFillTime),
Status= map_dbl(value,~.$Status),
Symbol= map_chr(value,~.$Symbol$Value),
Price= map_dbl(value,~.$Price),
Type = map_dbl(value,~.$Type),
Direction=map_dbl(value,~.$Direction),
Quantity= map_dbl(value,~.$Quantity),
Value= map_dbl(value,~.$Value) ) %>%
select(-value) %>% mutate(CreatedTime=strptime(CreatedTime, format="%Y-%m-%dT%H:%M"),
LastFilltime=strptime(LastFilltime, format="%Y-%m-%dT%H:%M")) -> Order #detailed order complete
output <- list(Statistics=Stats,Equity=equity_series,Position=Log,Orderbook = Order)
return(output)
}else if (analysis=="optimization") {
path <- paste0("C:/Users/PC/Quantconnect/",strategy,"/",analysis,"s/",run_date)
files <- list.dirs(path,full.names = F,recursive = F)
files <- files[!grepl("code",files)]
Stats <- tibble(Total_Trades=character(), Average_Win=character(), Average_Loss=character(),
Compounding_Annual_Return=character(),Drawdown=character(),Expectancy=character(),
Net_Profit=character(),Sharpe_Ratio=character(),Probabilistic_Sharpe_Ratio=character(),
Loss_Rate=character(),Win_Rate=character(),Profit_Loss_Ratio=character(),
Alpha=character(),Beta=character(),Annual_Standard_Deviation=character(),
Annual_Variance=character(),Information_Ratio=character(),Tracking_Error=character(),
Treynor_Ratio=character(),Total_Fees=character(),Estimated_Strategy_Capacity=character(),
Lowest_Capacity_Asset=character())
equity_series <-tibble()
dictionary <- list()
for (opt in files) {
path2 <- paste0(path,"/",opt)
files2 <- list.files(path2)
json_files2 <-  files2[stringr::str_split_fixed(files2,"\\.",n=2)[,2] =="json"]
filename_test2 <- json_files2[!(grepl("order",json_files2) | grepl("data",json_files2)) ]
optimresults <- jsonlite::fromJSON(paste0(path2,"/",filename_test2))
params <- optimresults$AlgorithmConfiguration$Parameters
Stats1 <- optimresults$Statistics %>% as_tibble()
Stats1 %>% colnames() %>% chartr(" ","_",x = .) %>% chartr("-","_",x = .) -> colnames(Stats1)
Stats1 <- cbind(Stats1,params)
if (which(files == opt)==1) {
Stats <- Stats1
}else{
Stats <- rbind(Stats,Stats1)
}
rm(Stats1)
equity_series1 <- optimresults$Charts$`Strategy Equity`$Series$Equity$Values %>% as_tibble() %>%
mutate(x=as.Date.POSIXct(x)) %>% rename(Date = x ,Equity = y)
paste0("alt_",which(files == opt)) -> colnames(equity_series1)[2]
if (which(files == opt)==1) {
equity_series <- equity_series1
}else{
equity_series <- left_join(equity_series,equity_series1,by="Date")
}
rm(equity_series1)
value <- list(params)
names(value) <- paste0("alt_",which(files == opt))
dictionary <- append(dictionary,value)
}
output <- list(Statistics = Stats,Equity = equity_series,Dict=dictionary)
return(output)
}else {errorCondition("Analysis have to be 'backtest' or 'Optimization'")}
analysis
#backtest
if (analysis == "backtest") {
path <- paste0("C:/Users/PC/Quantconnect/",strategy,"/",analysis,"s/",run_date)
files <- list.files(path)
filename_log <- files[grepl("-log",files)]
json_files <-  files[stringr::str_split_fixed(files,"\\.",n=2)[,2] =="json"]
filename_order <- json_files[grepl("order",json_files)]
filename_test <- json_files[!(grepl("order",json_files) | grepl("data",json_files)) ]
backestresults <- jsonlite::fromJSON(paste0(path,"/",filename_test))
Stats <- backestresults$Statistics %>% as_tibble()
Stats %>% colnames() %>% chartr(" ","_",x = .) -> colnames(Stats) #Stats complete
equity_series <- backestresults$Charts$`Strategy Equity`$Series$Equity$Values %>% as_tibble() %>%
mutate(x=as.Date.POSIXct(x)) %>% rename(Date = x ,Equity = y) #Equity complete
Log <- read.delim(paste0(path,"/",filename_log),sep = " ") %>% as_tibble()
c("time1","time2","catcher","symbol","Position","Value") -> colnames(Log)
Log %<>% unite("Date",c(time1,time2),sep=" ") %>% select(-'') %>%
filter(grepl("PositionsLogReport:",catcher)) %>% select(-catcher) %>%
mutate(Date=strptime(Date, format="%Y-%m-%d  %H:%M")) #Log dan position complete
backestresults$Orders %>% as_tibble_col() %>% mutate(ID= map_chr(value,~paste0("Order_",.$Id)),
CreatedTime= map_chr(value,~.$CreatedTime),
LastFilltime =map_chr(value,~.$LastFillTime),
Status= map_dbl(value,~.$Status),
Symbol= map_chr(value,~.$Symbol$Value),
Price= map_dbl(value,~.$Price),
Type = map_dbl(value,~.$Type),
Direction=map_dbl(value,~.$Direction),
Quantity= map_dbl(value,~.$Quantity),
Value= map_dbl(value,~.$Value) ) %>%
select(-value) %>% mutate(CreatedTime=strptime(CreatedTime, format="%Y-%m-%dT%H:%M"),
LastFilltime=strptime(LastFilltime, format="%Y-%m-%dT%H:%M")) -> Order #detailed order complete
output <- list(Statistics=Stats,Equity=equity_series,Position=Log,Orderbook = Order)
return(output)
}else if (analysis=="optimization") {
path <- paste0("C:/Users/PC/Quantconnect/",strategy,"/",analysis,"s/",run_date)
files <- list.dirs(path,full.names = F,recursive = F)
files <- files[!grepl("code",files)]
Stats <- tibble(Total_Trades=character(), Average_Win=character(), Average_Loss=character(),
Compounding_Annual_Return=character(),Drawdown=character(),Expectancy=character(),
Net_Profit=character(),Sharpe_Ratio=character(),Probabilistic_Sharpe_Ratio=character(),
Loss_Rate=character(),Win_Rate=character(),Profit_Loss_Ratio=character(),
Alpha=character(),Beta=character(),Annual_Standard_Deviation=character(),
Annual_Variance=character(),Information_Ratio=character(),Tracking_Error=character(),
Treynor_Ratio=character(),Total_Fees=character(),Estimated_Strategy_Capacity=character(),
Lowest_Capacity_Asset=character())
equity_series <-tibble()
dictionary <- list()
for (opt in files) {
path2 <- paste0(path,"/",opt)
files2 <- list.files(path2)
json_files2 <-  files2[stringr::str_split_fixed(files2,"\\.",n=2)[,2] =="json"]
filename_test2 <- json_files2[!(grepl("order",json_files2) | grepl("data",json_files2)) ]
optimresults <- jsonlite::fromJSON(paste0(path2,"/",filename_test2))
params <- optimresults$AlgorithmConfiguration$Parameters
Stats1 <- optimresults$Statistics %>% as_tibble()
Stats1 %>% colnames() %>% chartr(" ","_",x = .) %>% chartr("-","_",x = .) -> colnames(Stats1)
Stats1 <- cbind(Stats1,params)
if (which(files == opt)==1) {
Stats <- Stats1
}else{
Stats <- rbind(Stats,Stats1)
}
rm(Stats1)
equity_series1 <- optimresults$Charts$`Strategy Equity`$Series$Equity$Values %>% as_tibble() %>%
mutate(x=as.Date.POSIXct(x)) %>% rename(Date = x ,Equity = y)
paste0("alt_",which(files == opt)) -> colnames(equity_series1)[2]
if (which(files == opt)==1) {
equity_series <- equity_series1
}else{
equity_series <- left_join(equity_series,equity_series1,by="Date")
}
rm(equity_series1)
value <- list(params)
names(value) <- paste0("alt_",which(files == opt))
dictionary <- append(dictionary,value)
}
output <- list(Statistics = Stats,Equity = equity_series,Dict=dictionary)
return(output)
}else {errorCondition("Analysis have to be 'backtest' or 'Optimization'")}
meta_analysis <- function(strategy,run_date,analysis=c("backtest","optimization")){
require(stringr)
require(jsonlite)
require(magrittr)
require(dplyr)
require(tidyr)
require(tibble)
print("1")
#backtest
if (analysis == "backtest") {
print("2")
path <- paste0("C:/Users/PC/Quantconnect/",strategy,"/",analysis,"s/",run_date)
files <- list.files(path)
filename_log <- files[grepl("-log",files)]
json_files <-  files[stringr::str_split_fixed(files,"\\.",n=2)[,2] =="json"]
filename_order <- json_files[grepl("order",json_files)]
filename_test <- json_files[!(grepl("order",json_files) | grepl("data",json_files)) ]
backestresults <- jsonlite::fromJSON(paste0(path,"/",filename_test))
Stats <- backestresults$Statistics %>% as_tibble()
Stats %>% colnames() %>% chartr(" ","_",x = .) -> colnames(Stats) #Stats complete
equity_series <- backestresults$Charts$`Strategy Equity`$Series$Equity$Values %>% as_tibble() %>%
mutate(x=as.Date.POSIXct(x)) %>% rename(Date = x ,Equity = y) #Equity complete
Log <- read.delim(paste0(path,"/",filename_log),sep = " ") %>% as_tibble()
c("time1","time2","catcher","symbol","Position","Value") -> colnames(Log)
Log %<>% unite("Date",c(time1,time2),sep=" ") %>% select(-'') %>%
filter(grepl("PositionsLogReport:",catcher)) %>% select(-catcher) %>%
mutate(Date=strptime(Date, format="%Y-%m-%d  %H:%M")) #Log dan position complete
backestresults$Orders %>% as_tibble_col() %>% mutate(ID= map_chr(value,~paste0("Order_",.$Id)),
CreatedTime= map_chr(value,~.$CreatedTime),
LastFilltime =map_chr(value,~.$LastFillTime),
Status= map_dbl(value,~.$Status),
Symbol= map_chr(value,~.$Symbol$Value),
Price= map_dbl(value,~.$Price),
Type = map_dbl(value,~.$Type),
Direction=map_dbl(value,~.$Direction),
Quantity= map_dbl(value,~.$Quantity),
Value= map_dbl(value,~.$Value) ) %>%
select(-value) %>% mutate(CreatedTime=strptime(CreatedTime, format="%Y-%m-%dT%H:%M"),
LastFilltime=strptime(LastFilltime, format="%Y-%m-%dT%H:%M")) -> Order #detailed order complete
output <- list(Statistics=Stats,Equity=equity_series,Position=Log,Orderbook = Order)
return(output)
}else if (analysis=="optimization") {
print("3")
path <- paste0("C:/Users/PC/Quantconnect/",strategy,"/",analysis,"s/",run_date)
files <- list.dirs(path,full.names = F,recursive = F)
files <- files[!grepl("code",files)]
Stats <- tibble(Total_Trades=character(), Average_Win=character(), Average_Loss=character(),
Compounding_Annual_Return=character(),Drawdown=character(),Expectancy=character(),
Net_Profit=character(),Sharpe_Ratio=character(),Probabilistic_Sharpe_Ratio=character(),
Loss_Rate=character(),Win_Rate=character(),Profit_Loss_Ratio=character(),
Alpha=character(),Beta=character(),Annual_Standard_Deviation=character(),
Annual_Variance=character(),Information_Ratio=character(),Tracking_Error=character(),
Treynor_Ratio=character(),Total_Fees=character(),Estimated_Strategy_Capacity=character(),
Lowest_Capacity_Asset=character())
equity_series <-tibble()
dictionary <- list()
for (opt in files) {
print("4")
path2 <- paste0(path,"/",opt)
files2 <- list.files(path2)
json_files2 <-  files2[stringr::str_split_fixed(files2,"\\.",n=2)[,2] =="json"]
filename_test2 <- json_files2[!(grepl("order",json_files2) | grepl("data",json_files2)) ]
optimresults <- jsonlite::fromJSON(paste0(path2,"/",filename_test2))
params <- optimresults$AlgorithmConfiguration$Parameters
Stats1 <- optimresults$Statistics %>% as_tibble()
Stats1 %>% colnames() %>% chartr(" ","_",x = .) %>% chartr("-","_",x = .) -> colnames(Stats1)
Stats1 <- cbind(Stats1,params)
if (which(files == opt)==1) {
Stats <- Stats1
}else{
Stats <- rbind(Stats,Stats1)
}
rm(Stats1)
equity_series1 <- optimresults$Charts$`Strategy Equity`$Series$Equity$Values %>% as_tibble() %>%
mutate(x=as.Date.POSIXct(x)) %>% rename(Date = x ,Equity = y)
paste0("alt_",which(files == opt)) -> colnames(equity_series1)[2]
if (which(files == opt)==1) {
equity_series <- equity_series1
}else{
equity_series <- left_join(equity_series,equity_series1,by="Date")
}
rm(equity_series1)
value <- list(params)
names(value) <- paste0("alt_",which(files == opt))
dictionary <- append(dictionary,value)
}
output <- list(Statistics = Stats,Equity = equity_series,Dict=dictionary)
return(output)
}else {errorCondition("Analysis have to be 'backtest' or 'Optimization'")}
}
meta_analysis(strategy = "Fat Apricot Donkey",run_date = "2023-02-17_16-15-56",analysis = "optimization")
meta_analysis <- function(strategy,run_date,analysis=c("backtest","optimization")){
require(stringr)
require(jsonlite)
require(magrittr)
require(dplyr)
require(tidyr)
require(tibble)
print("1")
#backtest
if (analysis == "backtest") {
print("2")
path <- paste0("C:/Users/PC/Quantconnect/",strategy,"/",analysis,"s/",run_date)
files <- list.files(path)
filename_log <- files[grepl("-log",files)]
json_files <-  files[stringr::str_split_fixed(files,"\\.",n=2)[,2] =="json"]
filename_order <- json_files[grepl("order",json_files)]
filename_test <- json_files[!(grepl("order",json_files) | grepl("data",json_files)) ]
backestresults <- jsonlite::fromJSON(paste0(path,"/",filename_test))
Stats <- backestresults$Statistics %>% as_tibble()
Stats %>% colnames() %>% chartr(" ","_",x = .) -> colnames(Stats) #Stats complete
equity_series <- backestresults$Charts$`Strategy Equity`$Series$Equity$Values %>% as_tibble() %>%
mutate(x=as.Date.POSIXct(x)) %>% rename(Date = x ,Equity = y) #Equity complete
Log <- read.delim(paste0(path,"/",filename_log),sep = " ") %>% as_tibble()
c("time1","time2","catcher","symbol","Position","Value") -> colnames(Log)
Log %<>% unite("Date",c(time1,time2),sep=" ") %>% select(-'') %>%
filter(grepl("PositionsLogReport:",catcher)) %>% select(-catcher) %>%
mutate(Date=strptime(Date, format="%Y-%m-%d  %H:%M")) #Log dan position complete
backestresults$Orders %>% as_tibble_col() %>% mutate(ID= map_chr(value,~paste0("Order_",.$Id)),
CreatedTime= map_chr(value,~.$CreatedTime),
LastFilltime =map_chr(value,~.$LastFillTime),
Status= map_dbl(value,~.$Status),
Symbol= map_chr(value,~.$Symbol$Value),
Price= map_dbl(value,~.$Price),
Type = map_dbl(value,~.$Type),
Direction=map_dbl(value,~.$Direction),
Quantity= map_dbl(value,~.$Quantity),
Value= map_dbl(value,~.$Value) ) %>%
select(-value) %>% mutate(CreatedTime=strptime(CreatedTime, format="%Y-%m-%dT%H:%M"),
LastFilltime=strptime(LastFilltime, format="%Y-%m-%dT%H:%M")) -> Order #detailed order complete
output <- list(Statistics=Stats,Equity=equity_series,Position=Log,Orderbook = Order)
return(output)
}else if (analysis=="optimization") {
print("3")
path <- paste0("C:/Users/PC/Quantconnect/",strategy,"/",analysis,"s/",run_date)
files <- list.dirs(path,full.names = F,recursive = F)
files <- files[!grepl("code",files)]
Stats <- tibble(Total_Trades=character(), Average_Win=character(), Average_Loss=character(),
Compounding_Annual_Return=character(),Drawdown=character(),Expectancy=character(),
Net_Profit=character(),Sharpe_Ratio=character(),Probabilistic_Sharpe_Ratio=character(),
Loss_Rate=character(),Win_Rate=character(),Profit_Loss_Ratio=character(),
Alpha=character(),Beta=character(),Annual_Standard_Deviation=character(),
Annual_Variance=character(),Information_Ratio=character(),Tracking_Error=character(),
Treynor_Ratio=character(),Total_Fees=character(),Estimated_Strategy_Capacity=character(),
Lowest_Capacity_Asset=character())
equity_series <-tibble()
dictionary <- list()
for (opt in files) {
print("4")
path2 <- paste0(path,"/",opt)
files2 <- list.files(path2)
json_files2 <-  files2[stringr::str_split_fixed(files2,"\\.",n=2)[,2] =="json"]
filename_test2 <- json_files2[!(grepl("order",json_files2) | grepl("data",json_files2)) ]
optimresults <- jsonlite::fromJSON(paste0(path2,"/",filename_test2))
params <- optimresults$AlgorithmConfiguration$Parameters
Stats1 <- optimresults$Statistics %>% as_tibble()
Stats1 %>% colnames() %>% chartr(" ","_",x = .) %>% chartr("-","_",x = .) -> colnames(Stats1)
Stats1 <- cbind(Stats1,params)
if (which(files == opt)==1) {
Stats <- Stats1
}else{
Stats <- rbind(Stats,Stats1)
}
rm(Stats1)
equity_series1 <- optimresults$Charts$`Strategy Equity`$Series$Equity$Values %>% as_tibble() %>%
mutate(x=as.Date.POSIXct(x)) %>% rename(Date = x ,Equity = y)
paste0("alt_",which(files == opt)) -> colnames(equity_series1)[2]
if (which(files == opt)==1) {
equity_series <- equity_series1
}else{
equity_series <- cbind(equity_series,equity_series1)
}
rm(equity_series1)
value <- list(params)
names(value) <- paste0("alt_",which(files == opt))
dictionary <- append(dictionary,value)
}
output <- list(Statistics = Stats,Equity = equity_series,Dict=dictionary)
return(output)
}else {errorCondition("Analysis have to be 'backtest' or 'Optimization'")}
}
meta_analysis(strategy = "Fat Apricot Donkey",run_date = "2023-02-17_16-15-56",analysis = "optimization")
output
output <- meta_analysis(strategy = "Fat Apricot Donkey",run_date = "2023-02-17_16-15-56",analysis = "optimization")
output
output$Statistics
library(tidyverse)
output$Statistics
output$Statistics %>% as_tibble()
output$Dict
setwd("~/Github/Diamond")
library(arrow)
open_dataset("DATA/TEFAS/2024-01-11")
read_parquet("C:/Users/PC/Documents/Github/Diamond/DATA/DATABASE/TEFAS/2024-01-11/part-0.parquet")
dat <-read_parquet("C:/Users/PC/Documents/Github/Diamond/DATA/DATABASE/TEFAS/2024-01-11/part-0.parquet")
library(tidyverse)
dat %>% as_tibble()
dat %>% as_tibble() %>% select(title)
options(encoding = "UTF-8")
dat <-read_parquet("C:/Users/PC/Documents/Github/Diamond/DATA/DATABASE/TEFAS/2024-01-11/part-0.parquet")
dat %>% as_tibble() %>% select(title)
dat %>% as_tibble() %>% select(title) %>% stri_enc_mark(.)
Encoding(dat)
Encoding(dat$title)
Encoding(dat$title) <- "UTF-8"
Encoding(dat$title)
dat$title
Encoding(dat$title)
dat$title[3]
dat$title
dat$title[3]
options()
options()-> a
a$encoding
Encoding(dat$title)
dat$title[1:3]
Encoding(dat$title[3]) <- "UTF-8"
dat$title[3]
open_dataset("DATA/TEFAS")
open_dataset("DATA/DATABASE/TEFAS")
dataset <- open_dataset("DATA/DATABASE/TEFAS") %>% collect()
dataset
filter
dataset %>% colnames()
dataset <- open_dataset("DATA/DATABASE/TEFAS",partitioning = "Date") %>% collect()
dataset %>% colnames()
dataset %>% filter(Date==as.Date("2024-01-11"))
dataset %>% filter(Date==as.Date("2024-01-11")) %>% select(title)
dataset <- open_dataset("DATA/DATABASE/TEFAS",partitioning = "Date",encoding="UTF-8") %>% collect()
stri_enc_mark(data$title)
library(stringi)
stri_enc_mark(data$title)
data$title
stri_enc_mark(dat$title)
stri_encode(dat$title,"ASCII","UTF-8")
stri_encode(dat$title,"","UTF-8")
stri_enc_mark(dat$title[3])
stri_encode(dat$title,"UTF-8","ASCII")
stri_encode(dat$title,"UTF-8","")
stri_encode(dat$title,"","ISO-8859-9")
stri_encode(dat$title,"","ASCII")
dat$title
unicode_turkce_tablosu <- c(
# Büyük harfler
"Ç" = "\u00C7", "Ğ" = "\u00D0", "İ" = "\u00D6", "Ö" = "\u00F6", "Ş" = "\u00D8", "Ü" = "\u00DC",
ö
i
iconvlist()
iconv(dat$title[3], to='ASCII//TRANSLIT')
stri_encode(dat$title,"",'ASCII//TRANSLIT')
iconv(dat$title, to='ASCII//TRANSLIT')
locale()
ü
stri_enc_mark(dat$title[3])
stri_encode(dat$title,"",'ASCII')
stri_encode(dat$title[3],"",'ASCII')
dat$title[3]
'\u0096'=="Ö"
'\u0096' == "Ö"
)
stri_encode(dat$title[3],"ASCII",'UTF-8')
stri_enc_mark(dat$title[3])
stri_encode(dat$title[3],"UTF-8",'UTF-8')
stri_encode(dat$title[3],"UTF-8",'ISO-8859-9')
iconvlist()
iconv(dat$title, to='x-mac-turkish')
iconvlist()
iconv(dat$title, to='UTF-32')
iconv(dat$title, to='MS-TURK')
iconvlist()
iconv(dat$title, to="ASCII" )
iconv(dat$title, to="ASCII//TRASNLIT" )
iconv(dat$title, to="ASCII\\TRASNLIT" )
iconv(dat$title, to="ASCII\\TRANSLIT" )
iconv(dat$title, to="ASCII//TRANSLIT" )
dat$title
dat$title <- iconv(dat$title, to="ASCII//TRANSLIT" )
dat$title
dataset %>%
dat <-read_parquet("C:/Users/PC/Documents/Github/Diamond/DATA/DATABASE/TEFAS/2024-01-11/part-0.parquet")
dat$title
dataset %>%
dat <-read_parquet("C:/Users/PC/Documents/Github/Diamond/DATA/DATABASE/TEFAS/2024-01-11/part-0.parquet")
dat <- read_parquet("C:/Users/PC/Documents/Github/Diamond/DATA/DATABASE/TEFAS/2024-01-11/part-0.parquet")
dat$title
load("C:/Users/PC/OneDrive/BES_Robo/Backup/YF_Data.RData")
YF_Data
YF_Data %>% tail()
load("C:/Users/PC/OneDrive/BES_Robo/Backup/YF_Data_raw.RData")
YF_Data
load("C:/Users/PC/OneDrive/BES_Robo/Backup/Rasyonet_Index.RData")
Rasyonet_Index
load("C:/Users/PC/OneDrive/BES_Robo/Backup/Asset_Prices_All.rdata")
Asset_Prices_All
Asset_Prices_All %>% tail()
YF_Data
dibs365 <- read_html("https://borsaistanbul.com/tr/endeks-detay/428/bist-kyd-dibs-365-gun")
library(rvest)
dibs365 <- read_html("https://borsaistanbul.com/tr/endeks-detay/428/bist-kyd-dibs-365-gun")
dibs365 %>% html_elements("highchart-series")
dibs365 %>% html_elements("highchart-root")
dibs365 %>% html_elements("svg")
dibs365
dibs365 %>% html_elements("head")
dibs365 %>% html_elements("div")
dibs365 %>% html_elements("div class")
dibs365 %>% html_elements("svg")
